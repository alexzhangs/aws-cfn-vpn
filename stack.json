{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create VPN services, contains 1 EC2 instance, 1 EIP and 1 security group. Also contains a nested template to create VPC resources.",
  "Resources": {
    "VpcStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "VpcStackTemplateURL"},
        "Parameters": {
          "VpcCidrBlock": {"Ref": "VpcCidrBlock"},
          "SubnetCidrBlocks": {"Fn::Join": [",", {"Ref": "SubnetCidrBlocks"}]}
        },
        "TimeoutInMinutes": "2"
      }
    },
    "VpcPeerAcceptorStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableVpcPeerAcceptor",
      "Properties": {
        "TemplateURL": {"Ref": "VpcPeerAcceptorStackTemplateURL"},
        "Parameters": {
          "RouteTableId": {"Fn::GetAtt": ["VpcStack", "Outputs.PublicRouteTable"]}
        },
        "TimeoutInMinutes": "5"
      }
    },
    "VpcPeerRequesterStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableVpcPeerRequester",
      "Properties": {
        "TemplateURL": {"Ref": "VpcPeerRequesterStackTemplateURL"},
        "Parameters": {
          "VpcId": {"Fn::GetAtt": ["VpcStack", "Outputs.Vpc"]},
          "CidrBlock": {"Ref": "VpcCidrBlock"},
          "RouteTableId": {"Fn::GetAtt": ["VpcStack", "Outputs.PublicRouteTable"]},
          "PeeringVpcId": {"Ref": "VpcPeerAcceptorVpcId"},
          "PeeringRegion": {"Ref": "VpcPeerAcceptorRegion"},
          "PeeringAccountId": {"Ref": "SSMAccountId"},
          "PeeringRoleArn": {"Ref": "VpcPeerAcceptorRoleArn"},
          "PeeringCidrBlock": {"Ref": "VpcPeerAcceptorCidrBlock"},
          "PeeringSqsQueueUrl": {"Ref": "VpcPeerAcceptorSqsQueueUrl"}
        },
        "TimeoutInMinutes": "5"
      }
    },
    "ConfigProviderStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableConfigProvider",
      "Properties": {
        "TemplateURL": {"Ref": "ConfigProviderStackTemplateURL"},
        "Parameters": {
          "AllSupported": "false",
          "IncludeGlobalResourceTypes": "false",
          "ResourceTypes": "AWS::EC2::Instance",
          "SnsTopicArn": {"Fn::If": [
            "EnableConfigConsumer",
            {"Ref": "SnsTopicForConfig"},
            {"Ref": "SnsTopicArn"}
          ]}
        },
        "TimeoutInMinutes": "5"
      }
    },
    "LexBotStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableLexBot",
      "Properties": {
        "TemplateURL": {"Ref": "LexBotStackTemplateURL"},
        "Parameters": {
          "Region": {"Ref": "LexBotRegion"},
          "LambdaArn": {"Fn::GetAtt": ["LambdaLexBot", "Arn"]}
        },
        "TimeoutInMinutes": "3"
      }
    },
    "VPNServerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "VPN server security group",
        "VpcId": {"Fn::GetAtt": ["VpcStack", "Outputs.Vpc"]},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": "${AWS::StackName}-VPNServerSG"}
          }
        ]
      }
    },
    "L2TPIKEIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableL2TP",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": 500,
        "ToPort": 500,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "L2TPNATIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableL2TP",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": 4500,
        "ToPort": 4500,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "SSTCPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": {"Ref": "SSPortBegin"},
        "ToPort": {"Ref": "SSPortEnd"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "SSUDPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": {"Ref": "SSPortBegin"},
        "ToPort": {"Ref": "SSPortEnd"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "SSManagerIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": {"Ref": "SSManagerPort"},
        "ToPort": {"Ref": "SSManagerPort"},
        "CidrIp": {"Fn::If":[
          "EnableVpcPeerRequester",
          {"Ref": "VpcPeerAcceptorCidrBlock"},
          {"Ref": "VpcCidrBlock"}
        ]},
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "SSMWebIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSM",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": {"Ref": "SSMPort"},
        "ToPort": {"Ref": "SSMPort"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "SSMTlsIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSMTLS",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": 443,
        "ToPort": 443,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Fn::GetAtt": ["VPNServerSG", "GroupId"]}
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": {"Ref": "EipDomain"},
        "InstanceId": {"Ref": "VPNServerInstance"}
      }
    },
    "VPNServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMap", {"Ref": "AWS::Region"}, "AMI"]},
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyPairName"},
        "Monitoring": {"Ref": "Monitoring"},
        "SubnetId": {"Fn::GetAtt": ["VpcStack", "Outputs.PublicSubnet01"]},
        "SecurityGroupIds": [{"Ref": "VPNServerSG"}],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": "8"
            }
          }
        ],
        "Tags": [
          {"Key": "Name", "Value": {"Ref": "AWS::StackName"}},
          {
            "Key": "ConfigHandlerClass",
            "Value": {"Fn::Join": [",", [
              {"Fn::If": ["DomainNameServerEnvIsNotNull", "NameServerHandler", {"Ref": "AWS::NoValue"}]},
              {"Fn::If": ["SSMDomainNameServerEnvIsNotNull", "SsmNameServerHandler", {"Ref": "AWS::NoValue"}]},
              {"Fn::If": ["SSDomainNameServerEnvIsNotNull", "SsnNameServerHandler", {"Ref": "AWS::NoValue"}]},
              {"Fn::If": ["L2TPDomainNameServerEnvIsNotNull", "L2tpNameServerHandler", {"Ref": "AWS::NoValue"}]},

              {"Fn::If": ["SSMDomainIsNotNull", "SsmDomainHandler,SsmRecordHandler", {"Ref": "AWS::NoValue"}]},
              {"Fn::If": ["SSDomainIsNotNull", "SsnDomainHandler,SsnRecordHandler", {"Ref": "AWS::NoValue"}]},
              {"Fn::If": ["L2TPDomainIsNotNull", "L2tpDomainHandler,L2tpRecordHandler", {"Ref": "AWS::NoValue"}]},

              {"Fn::If": ["EnableSSN", "NodeHandler,SSManagerHandler", {"Ref": "AWS::NoValue"}]}
            ]]}
          },
          {"Fn::If": ["DomainNameServerEnvIsNotNull", {"Key": "DomainNameServerEnv", "Value": {"Ref": "DomainNameServerEnv"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["SSMDomainNameServerEnvIsNotNull", {"Key": "SSMDomainNameServerEnv", "Value": {"Ref": "SSMDomainNameServerEnv"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["SSDomainNameServerEnvIsNotNull", {"Key": "SSDomainNameServerEnv", "Value": {"Ref": "SSDomainNameServerEnv"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["L2TPDomainNameServerEnvIsNotNull", {"Key": "L2TPDomainNameServerEnv", "Value": {"Ref": "L2TPDomainNameServerEnv"}}, {"Ref": "AWS::NoValue"}]},

          {"Fn::If": ["SSMDomainIsNotNull", {"Key": "SSMDomain", "Value": {"Ref": "SSMDomain"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["SSDomainIsNotNull", {"Key": "SSDomain", "Value": {"Ref": "SSDomain"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["L2TPDomainIsNotNull", {"Key": "L2TPDomain", "Value": {"Ref": "L2TPDomain"}}, {"Ref": "AWS::NoValue"}]},

          {"Fn::If": ["EnableSSN", {
              "Key": "SSManager",
              "Value": {"Fn::Join": ["", [
                "{",
                "\"interface\":\"", {"Ref": "SSManagerInterface"},
                "\",\"port\":\"", {"Ref": "SSManagerPort"},
                "\",\"encrypt\":\"", {"Ref": "SSEncrypt"},
                "\",\"server_edition\":\"", 1,
                "\",\"is_v2ray_enabled\":\"", {"Ref": "SSV2Ray"},
                "\"}"
              ]]}
            }, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableSSN", {"Key": "SnsTopicArn", "Value": {"Ref": "SnsTopicForSsn"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableSSN", {"Key": "AccessKeyForUserSnsPublisher", "Value": {"Ref": "AccessKeyForUserSnsPublisher"}}, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableSSN", {
              "Key": "SecretKeyForUserSnsPublisher",
              "Value": {"Fn::GetAtt": ["AccessKeyForUserSnsPublisher", "SecretAccessKey"]}
            }, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableConfigConsumer", {
              "Key": "ConditionalDependsOn-LambdaSnsTopicSubscriberInvokePermission",
              "Value": {"Ref": "LambdaSnsTopicSubscriberInvokePermission"}
            }, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableConfigConsumer", {
              "Key": "ConditionalDependsOn-SnsTopicPolicyForConfig",
              "Value": {"Ref": "SnsTopicPolicyForConfig"}
            }, {"Ref": "AWS::NoValue"}]},
          {"Fn::If": ["EnableConfigProvider", {
              "Key": "ConditionalDependsOn-ConfigProviderStack",
              "Value": {"Ref": "ConfigProviderStack"}
            }, {"Ref": "AWS::NoValue"}]}
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",

                "# Signal the status from cfn-init on EXIT\n",
                "trap '/opt/aws/bin/cfn-signal -e $?",
                " --stack ", {"Ref": "AWS::StackName"},
                " --resource VPNServerInstance",
                " --region ", {"Ref": "AWS::Region"},
                "' EXIT\n",

                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "#/opt/aws/bin/cfn-init ",
                "#         --stack ", {"Ref": "AWS::StackName"},
                "#         --resource VPNServerInstance ",
                "#         --configsets InstallAndRun ",
                "#         --region ", {"Ref": "AWS::Region"}, "\n",

                "# enable linux swap file\n",
                "dd if=/dev/zero of=/var/swap.1 bs=1M count=2048\n",
                "chmod 600 /var/swap.1\n",
                "mkswap /var/swap.1\n",
                "swapon /var/swap.1\n",
                "echo '/var/swap.1 swap swap defaults 0 0' >> /etc/fstab\n",

                "yum update -y\n",

                "yum install -y git\n",
                "export PATH=/usr/local/bin:$PATH\n",
                "export HOME=~\n",

                "amazon-linux-extras install -y docker\n",
                "systemctl start docker\n",
                "systemctl enable docker\n",

                "declare ss_port_begin=", {"Ref": "SSPortBegin"}, "\n",
                "declare ss_port_end=", {"Ref": "SSPortEnd"}, "\n",

                {"Fn::If": ["DomainNameServerEnvIsNotNull", {"Fn::Join": ["", [
                  "declare dns_env='", {"Ref": "DomainNameServerEnv"}, "'\n"
                ]]}, ""]},

                {"Fn::If": ["EnableSSM", {"Fn::Join": ["", [
                  "declare public_ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",

                  "git clone --depth 1 https://github.com/alexzhangs/shadowsocks-manager\n",

                  "declare ssm_time_zone=", {"Ref": "SSMTimeZone"}, "\n",
                  "declare ssm_version=", {"Ref": "SSMVersion"}, "\n",
                  "declare ssm_admin_username=", {"Ref": "SSMAdminUsername"}, "\n",
                  "declare ssm_admin_password='", {"Ref": "SSMAdminPassword"}, "'\n",
                  "declare ssm_admin_email=", {"Ref": "SSMAdminEmail"}, "\n",

                  "declare -a ssm_install_opts\n",

                  "ssm_install_opts+=(-e SSM_TIME_ZONE=$ssm_time_zone)\n",
                  "ssm_install_opts+=(-u \"$ssm_admin_username\")\n",
                  "ssm_install_opts+=(-p \"$ssm_admin_password\")\n",
                  "ssm_install_opts+=(-M \"$ssm_admin_email\")\n",
                  "ssm_install_opts+=(-r \"$ss_port_begin\")\n",
                  "ssm_install_opts+=(-R \"$ss_port_end\")\n",

                  {"Fn::If": ["SSMDomainIsNotNull", {"Fn::Join": ["", [
                    "declare ssm_domain='", {"Ref": "SSMDomain"}, "'\n",

                    "ssm_install_opts+=(-d \"$ssm_domain\")\n",
                    "ssm_install_opts+=(-t A)\n",
                    "ssm_install_opts+=(-a \"$public_ip\")\n"
                  ]]}, ""]},

                  {"Fn::If": ["SSMDomainNameServerEnvIsNotNull", {"Fn::Join": ["", [
                    "declare ssm_dns_env='", {"Ref": "SSMDomainNameServerEnv"}, "'\n",

                    "ssm_install_opts+=(-E \"$ssm_dns_env\")\n",
                    "ssm_install_opts+=(-n ssm-nameserver)\n"
                  ]]}, {"Fn::If": ["DomainNameServerEnvIsNotNull", {"Fn::Join": ["", [
                    "ssm_install_opts+=(-E \"$dns_env\")\n"
                  ]]}, ""]}]},

                  {"Fn::If": ["EnableSSMTLS", "ssm_install_opts+=(-S)\n", ""]},

                  "SSM_VERSION=$ssm_version bash shadowsocks-manager/install.sh \"${ssm_install_opts[@]}\"\n"
                ]]}, ""]},

                {"Fn::If": ["EnableSSN", {"Fn::Join": ["", [
                  "declare private_ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",

                  "declare ssm_interface_ip=",
                    {"Fn::If": ["SSMIFLocalhost", "127.0.0.1",
                      {"Fn::If": ["SSMIFPrivate", "$private_ip",
                        {"Fn::If": ["SSMIFPublic", "0.0.0.0", ""]}
                      ]}
                    ]}, "\n",

                  "declare ssm_port=", {"Ref": "SSManagerPort"}, "\n",
                  "declare ss_encrypt=", {"Ref": "SSEncrypt"}, "\n",
                  "declare ss_timeout=", {"Ref": "SSTimeout"}, "\n",
                  "declare ss_ports=${ss_port_begin}-${ss_port_end}\n",
                  "declare ss_version=", {"Ref": "SSVersion"}, "\n",

                  "declare -a ss_docker_run_env_opts\n",
                  "declare -a ss_docker_run_port_opts\n",
                  "declare -a ss_docker_run_cmd_opts\n",

                  "ss_docker_run_port_opts+=(-p $ssm_interface_ip:$ssm_port:$ssm_port/UDP)\n",
                  "ss_docker_run_port_opts+=(-p $ss_ports:$ss_ports/UDP)\n",
                  "ss_docker_run_port_opts+=(-p $ss_ports:$ss_ports)\n",

                  "ss_docker_run_cmd_opts+=(--manager-address 0.0.0.0:$ssm_port)\n",
                  "ss_docker_run_cmd_opts+=(--executable /usr/local/bin/ss-server)\n",
                  "ss_docker_run_cmd_opts+=(-m $ss_encrypt -s 0.0.0.0 -t $ss_timeout -u)\n",

                  {"Fn::If": ["EnableV2Ray", {"Fn::Join": ["", [
                    "declare ss_domain=", {"Ref":  "SSDomain"}, "\n",

                    "ss_docker_run_env_opts+=(-e V2RAY=1 -e DOMAIN=$ss_domain)\n",
                    "ss_docker_run_cmd_opts+=(--plugin v2ray-plugin --plugin-opts \"server;tls;host=$ss_domain\")\n",

                    {"Fn::If": ["SSDomainNameServerEnvIsNotNull", {"Fn::Join": ["", [
                      "declare ss_dns_env=", {"Ref": "SSDomainNameServerEnv"}, "\n",
                      "ss_docker_run_env_opts+=(-e DNS=dns_lexicon -e DNS_ENV=$ss_dns_env)\n"
                    ]]}, {"Fn::If": ["DomainNameServerEnvIsNotNull", {"Fn::Join": ["", [
                      "ss_docker_run_env_opts+=(-e DNS=dns_lexicon -e DNS_ENV=$dns_env)\n"
                    ]]}, ""]}]}
                  ]]}, ""]},

                  "docker run \"${ss_docker_run_env_opts[@]}\" --restart=always -d \"${ss_docker_run_port_opts[@]}\"",
                  " --name ss-libev-v2ray alexzhangs/shadowsocks-libev-v2ray:$ss_version",
                  " ss-manager \"${ss_docker_run_cmd_opts[@]}\"\n"
                ]]}, ""]},

                {"Fn::If": ["EnableL2TP", {"Fn::Join": ["", [
                  "git clone --depth 1 https://github.com/alexzhangs/aws-ec2-xl2tpd\n",
                  "git clone --depth 1 https://github.com/alexzhangs/chap-manager\n",

                  "bash aws-ec2-xl2tpd/install.sh",
                  " -k '", {"Ref": "L2TPSharedKey"}, "'",
                  " -p '", {"Ref": "L2TPPrimaryDNS"}, "'",
                  " -s '", {"Ref": "L2TPSecondaryDNS"}, "'\n",

                  "bash chap-manager/install.sh\n",

                  "chap-manager.sh -a add",
                  " -u '", {"Ref": "L2TPUsername"}, "'",
                  " -p '", {"Ref": "L2TPPassword"}, "'\n"
                ]]}, ""]}
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      }
    },
    "LambdaSsmApiExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableSSM",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
        ],
        "Path": "/"
      }
    },
    "LambdaSsmApi": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableSSM",
      "Properties": {
        "Description": "Provide the Lambda interface for the shadowsocks-manager REST APIs: Domain, Node and SSManager.",
        "Code": {
          "S3Bucket": {"Ref": "S3BucketForLambdaSsmApi"},
          "S3Key": {"Ref": "S3KeyForLambdaSsmApi"}
        },
        "Environment": {
          "Variables": {
            "STACK_ID": {"Ref": "AWS::StackId"},
            "SSM_EC2_LOGICAL_ID": "VPNServerInstance",
            "SSM_PORT": {"Ref": "SSMPort"},
            "SSM_ADMIN_USERNAME": {"Ref": "SSMAdminUsername"},
            "SSM_ADMIN_PASSWORD": {"Ref": "SSMAdminPassword"}
          }
        },
        "Handler": "LambdaSsmApi.lambda_handler",
        "Runtime": "python3.12",
        "Timeout": "120",
        "Role": {"Fn::GetAtt": ["LambdaSsmApiExecutionRole", "Arn"]},
        "Layers": [{"Ref": "LambdaLayerRequests"}]
      }
    },
    "LambdaSsmApiInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableSSM",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["LambdaSsmApi", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "lambda.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"}
      }
    },
    "LambdaLayerRequests": {
      "Type": "AWS::Lambda::LayerVersion",
      "Condition": "EnableSSM",
      "Properties": {
        "LayerName": "LambdaLayerRequests",
        "Description": "The Lambda layer: requests.",
        "Content": {
          "S3Bucket": {"Ref": "S3BucketForLambdaLayerRequests"},
          "S3Key": {"Ref": "S3KeyForLambdaLayerRequests"}
        },
        "CompatibleRuntimes": ["python3.12"],
        "CompatibleArchitectures": ["x86_64", "arm64"]
      }
    },
    "LambdaSnsTopicSubscriberExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableConfigConsumer",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "LambdaSnsTopicSubscriber": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableConfigConsumer",
      "Properties": {
        "Description": "Receive AWS Config events through SNS, and update Domain, Node and SSManager in shadowsocks-manager.",
        "Code": {
          "S3Bucket": {"Ref": "S3BucketForLambdaSnsTopicSubscriber"},
          "S3Key": {"Ref": "S3KeyForLambdaSnsTopicSubscriber"}
        },
        "Environment": {
          "Variables": {
            "STACK_ID": {"Ref": "AWS::StackId"},
            "LAMBDA_SSM_API_ARN": {"Fn::GetAtt": ["LambdaSsmApi", "Arn"]}
          }
        },
        "Handler": "LambdaSnsTopicSubscriber.lambda_handler",
        "Runtime": "python3.12",
        "Timeout": "180",
        "Role": {"Fn::GetAtt": ["LambdaSnsTopicSubscriberExecutionRole", "Arn"]}
      }
    },
    "LambdaSnsTopicSubscriberInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableConfigConsumer",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["LambdaSnsTopicSubscriber", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "SnsTopicForConfig"}
      }
    },
    "SnsTopicForConfig": {
      "Type": "AWS::SNS::Topic",
      "Condition": "EnableConfigConsumer",
      "Properties": {
        "TopicName": {"Fn::Sub": "${AWS::StackName}-config-topic"},
        "Subscription": [
          {
            "Endpoint": {"Fn::GetAtt": ["LambdaSnsTopicSubscriber", "Arn"]},
            "Protocol": "lambda"
          }
        ]
      }
    },
    "SnsTopicPolicyForConfig": {
      "Type": "AWS::SNS::TopicPolicy",
      "Condition": "EnableConfigConsumer",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"AWS": "*"},
              "Action": "sns:Publish",
              "Resource": {"Ref": "SnsTopicForConfig"}
            }
          ]
        },
        "Topics": [{"Ref": "SnsTopicForConfig"}]
      }
    },
    "UserSnsPublisher": {
      "Type": "AWS::IAM::User",
      "Condition": "EnableSSN",
      "Properties": {
        "UserName": "sns_publisher",
        "Policies": [
          {
            "PolicyName": "policygen-SNS-PUBLISHER",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {"Ref":"SnsTopicForSsn"}
                }
              ]
            }
          }
        ]
      }
    },
    "AccessKeyForUserSnsPublisher": {
      "Type": "AWS::IAM::AccessKey",
      "Condition": "EnableSSN",
      "Properties": {
        "UserName": {
          "Ref": "UserSnsPublisher"
        }
      }
    },
    "SsnLambdaSnsTopicSubscriberExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableSSN",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ],
        "Path": "/"
      }
    },
    "SsnLambdaSnsTopicSubscriber": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableSSN",
      "Properties": {
        "Description": "Maintain the node stack by receiving the SNS messages.",
        "Code": {
          "S3Bucket": {"Ref": "S3BucketForSsnLambdaSnsTopicSubscriber"},
          "S3Key": {"Ref": "S3KeyForSsnLambdaSnsTopicSubscriber"}
        },
        "Environment": {
          "Variables": {
            "STACK_ID": {"Ref": "AWS::StackId"}
          }
        },
        "Handler": "SsnLambdaSnsTopicSubscriber.lambda_handler",
        "Runtime": "python3.12",
        "Timeout": "30",
        "Role": {"Fn::GetAtt": ["SsnLambdaSnsTopicSubscriberExecutionRole", "Arn"]}
      }
    },
    "SsnLambdaSnsTopicSubscriberInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableSSN",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["SsnLambdaSnsTopicSubscriber", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "SnsTopicForSsn"}
      }
    },
    "SnsTopicForSsn": {
      "Type": "AWS::SNS::Topic",
      "Condition": "EnableSSN",
      "Properties": {
        "TopicName": {"Fn::Sub": "${AWS::StackName}-ssn-topic"},
        "Subscription": [
          {
            "Endpoint": {"Fn::GetAtt": ["SsnLambdaSnsTopicSubscriber", "Arn"]},
            "Protocol": "lambda"
          }
        ]
      }
    },
    "SnsTopicPolicyForSsn": {
      "Type": "AWS::SNS::TopicPolicy",
      "Condition": "EnableSSN",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"AWS": "*"},
              "Action": "sns:Publish",
              "Resource": {"Ref": "SnsTopicForSsn"}
            }
          ]
        },
        "Topics": [{"Ref": "SnsTopicForSsn"}]
      }
    },
    "LambdaLexBotExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableLexBot",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "LambdaInvokeFunction",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "SnsPublish",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "LambdaLexBot": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableLexBot",
      "Properties": {
        "Description": "Manage the shadowsocks-manager nodes through AWS Lex Bot.",
        "Code": {
          "S3Bucket": {"Ref": "S3BucketForLambdaLexBot"},
          "S3Key": {"Ref": "S3KeyForLambdaLexBot"}
        },
        "Environment": {
          "Variables": {
            "LAMBDA_SSM_API_ARN": {"Fn::GetAtt": ["LambdaSsmApi", "Arn"]}
          }
        },
        "Handler": "LambdaLexBot.lambda_handler",
        "Runtime": "python3.12",
        "Timeout": "10",
        "Role": {"Fn::GetAtt": ["LambdaLexBotExecutionRole", "Arn"]}
      }
    },
    "LambdaLexBotInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableLexBot",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["LambdaLexBot", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": {"Fn::If": [
          "LexBotSeparateRegion",
          "lambda.amazonaws.com",
          "lex.amazonaws.com"
        ]},
        "SourceAccount": {"Ref": "AWS::AccountId"}
      }
    }
  },
  "Conditions": {
    "EnableVpcPeerAcceptor": {
      "Fn::Equals": [{"Ref": "EnableVpcPeerAcceptor"}, "1"]
    },
    "EnableVpcPeerRequester": {
      "Fn::Equals": [{"Ref": "EnableVpcPeerRequester"}, "1"]
    },
    "EnableSSN": {
      "Fn::Equals": [{"Ref": "EnableSSN"}, "1"]
    },
    "EnableV2Ray": {
      "Fn::And": [
        {"Condition": "EnableSSN"},
        {"Condition": "SSDomainIsNotNull"},
        {"Fn::Equals": [{"Ref": "SSV2Ray"}, "1"]}
      ]
    },
    "EnableSSM": {
      "Fn::Equals": [{"Ref": "EnableSSM"}, "1"]
    },
    "EnableL2TP": {
      "Fn::Equals": [{"Ref": "EnableL2TP"}, "1"]
    },
    "EnableConfigConsumer": {
      "Fn::Equals": [{"Ref": "EnableConfigConsumer"}, "1"]
    },
    "EnableConfigProvider": {
      "Fn::Equals": [{"Ref": "EnableConfigProvider"}, "1"]
    },
    "EnableLexBot": {
      "Fn::Equals": [{"Ref": "EnableLexBot"}, "1"]
    },
    "SSMDomainIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSMDomain"}]}]
    },
    "SSDomainIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSDomain"}]}]
    },
    "L2TPDomainIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "L2TPDomain"}]}]
    },
    "DomainNameServerEnvIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "DomainNameServerEnv"}]}]
    },
    "SSMDomainNameServerEnvIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSMDomainNameServerEnv"}]}]
    },
    "SSDomainNameServerEnvIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSDomainNameServerEnv"}]}]
    },
    "L2TPDomainNameServerEnvIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "L2TPDomainNameServerEnv"}]}]
    },
    "EnableSSMTLS": {
      "Fn::And": [
        {"Condition": "EnableSSM"},
        {"Condition": "SSMDomainIsNotNull"}
      ]
    },
    "LexBotSeparateRegion": {
      "Fn::Not": [{
        "Fn::Equals": [{"Ref": "AWS::Region"}, {"Ref": "LexBotRegion"}]
      }]
    },
    "SSMIFLocalhost": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "1"]
    },
    "SSMIFPrivate": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "2"]
    },
    "SSMIFPublic": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "3"]
    }
  },
  "Parameters": {
    "VpcCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "Enter CIDR Block for VPC. Default is '10.30.0.0/16' (65536 IPs).",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "EnableVpcPeerAcceptor": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to create VPC peer acceptor resource. 0: no, 1: yes. Default is '0'."
    },
    "VpcPeerAcceptorStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC peer acceptor stack template URL, must be an AWS S3 URL."
    },
    "EnableVpcPeerRequester": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to create VPC peer requester resource. 0: no, 1: yes. Default is '0'."
    },
    "VpcPeerRequesterStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC peer requester stack template URL, must be an AWS S3 URL."
    },
    "VpcPeerAcceptorVpcId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the VPC peer acceptor."
    },
    "VpcPeerAcceptorRegion": {
      "Type": "String",
      "Default": "",
      "Description": "Region code of the VPC peer acceptor."
    },
    "VpcPeerAcceptorRoleArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of the VPC peer role of acceptor."
    },
    "VpcPeerAcceptorCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the VPC peer acceptor.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VpcPeerAcceptorSqsQueueUrl": {
      "Type": "String",
      "Default": "",
      "Description": "SQS queue URL of the VPC peer acceptor."
    },
    "SubnetCidrBlocks": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24",
      "Description": "Comma-delimited list of CIDR blocks for subnets. Default is '10.30.0.0/24, 10.30.1.0/24, 10.30.2.0/24, 10.30.3.0/24' (256 IPs each).",
      "ConstraintDescription": "The single CIDR block must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "EipDomain": {
      "Type": "String",
      "Default": "vpc",
      "Description": "Switch the value between '' and 'vpc' to refresh EIP. The EIP assigned out of stack won't be deleted on stack delete. Default is 'vpc'."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "Description": "Enter a Instance Type. Default is 't2.micro'."
    },
    "Monitoring": {
      "Type": "String",
      "Default": "false",
      "Description": "Enter mornitor status. Default is 'false'."
    },
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "myhosts",
      "Description": "Enter Key Pair name. Default is 'myhosts'"
    },
    "EnableSSN": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install Shadowsocks server. 0: no, 1: yes. Default is '1'."
    },
    "SSV2Ray": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to enable v2ray plugin for Shadowsocks server. 0: no, 1: yes. Default is '0'."
    },
    "SSVersion": {
      "Type": "String",
      "Default": "latest",
      "Description": "Enter the version of shadowsocks-libev-v2ray. Default is 'latest'."
    },
    "SnsTopicArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of SNS topic."
    },
    "EnableSSM": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install Shadowsocks manager. 0: no, 1: yes. Default is '1'."
    },
    "EnableL2TP": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install L2TP server. 0: no, 1: yes. Default is '1'."
    },
    "SSPortBegin": {
      "Type": "String",
      "Default": "8381",
      "AllowedPattern": "\\d{1,5}",
      "Description": "Begin port allowed to use for Shadowsocks server. Default is '8381'."
    },
    "SSPortEnd": {
      "Type": "String",
      "Default": "8385",
      "AllowedPattern": "\\d{1,5}",
      "Description": "End port allowed to use for Shadowsocks server. Default is '8385'."
    },
    "SSDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain name resolved to Shadowsocks server. Example: ss.example.com"
    },
    "SSDomainNameServerEnv": {
      "Type": "String",
      "Default": "",
      "NoEcho": "true",
      "Description": "Environment variables required to use the DNS API service for SSDomain."
    },
    "SSManagerInterface": {
      "Type": "String",
      "Default": "2",
      "Description": "Network interface bound to Shadowsocks Manager API on the node. 1: Localhost, 2: Private, 3: Public. Default is 2"
    },
    "SSManagerPort": {
      "Type": "String",
      "Default": "6001",
      "Description": "Port number bound to Shadowsocks Manager API. Default is 6001"
    },
    "SSEncrypt": {
      "Type": "String",
      "Default": "aes-256-gcm",
      "Description": "Encrypt method for Shadowsocks server. Default is 'aes-256-gcm'."
    },
    "SSTimeout": {
      "Type": "String",
      "Default": "60",
      "AllowedPattern": "\\d{1,3}",
      "Description": "Socket timeout in seconds for Shadowsocks server. Default is 60."
    },
    "DomainNameServerEnv": {
      "Type": "String",
      "Default": "",
      "NoEcho": "true",
      "Description": "Environment variables required to use the DNS API service for SSMDomain, SSDomain and L2TPDomain."
    },
    "SSMAccountId": {
      "Type": "String",
      "Default": "",
      "Description": "AWS Account ID of the owner of the Shadowsocks manager stack."
    },
    "SSMDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain Name resolved to Shadowsocks manager. Example: admin.ss.example.com."
    },
    "SSMDomainNameServerEnv": {
      "Type": "String",
      "Default": "",
      "NoEcho": "true",
      "Description": "Environment variables required to use the DNS API service for SSMDomain."
    },
    "SSMPort": {
      "Type": "String",
      "Default": "8000",
      "Description": "Port number bound to Shadowsocks manager. Default is 8000"
    },
    "SSMAdminUsername": {
      "Type": "String",
      "Default": "admin",
      "Description": "Username for Shadowsocks manager administrator. Default is 'admin'."
    },
    "SSMAdminPassword": {
      "Type": "String",
      "Default": "passw0rd",
      "NoEcho": "true",
      "Description": "Password for Shadowsocks manager administrator. Default is 'passw0rd'."
    },
    "SSMAdminEmail": {
      "Type": "String",
      "Default": "",
      "Description": "Email address for Shadowsocks manager administrator. Will be shown as contact in account notification Email."
    },
    "SSMTimeZone": {
      "Type": "String",
      "Default": "UTC",
      "Description": "Prefered Time Zone. Default is 'UTC'."
    },
    "SSMVersion": {
      "Type": "String",
      "Default": "latest",
      "Description": "Enter the version of shadowsocks-manager. Default is 'latest'."
    },
    "L2TPDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain Name resolved to L2TP server. Example: vpn.example.com."
    },
    "L2TPDomainNameServerEnv": {
      "Type": "String",
      "Default": "",
      "NoEcho": "true",
      "Description": "Environment variables required to use the DNS API service for L2TPDomain."
    },
    "L2TPUsername": {
      "Type": "String",
      "Default": "vpnuser",
      "Description": "Enter username. Default is 'vpnuser'."
    },
    "L2TPPassword": {
      "Type": "String",
      "Default": "passw0rd",
      "NoEcho": "true",
      "Description": "Password to connecting to L2TP server. Default is 'passw0rd'."
    },
    "L2TPSharedKey": {
      "Type": "String",
      "Default": "SharedSecret",
      "NoEcho": "true",
      "Description": "Enter IPSec PSK. Default is 'SharedSecret'."
    },
    "L2TPPrimaryDNS": {
      "Type": "String",
      "Default": "8.8.8.8",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "Must be a valid IP v4 address like x.x.x.x.",
      "Description": "Enter primary DNS. Default is '8.8.8.8'."
    },
    "L2TPSecondaryDNS": {
      "Type": "String",
      "Default": "8.8.4.4",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "Must be a valid IP v4 address like x.x.x.x.",
      "Description": "Enter primary DNS. Default is '8.8.4.4'."
    },
    "EnableConfigConsumer": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Specifies whether SNS topic and Lambda function should be created, to handle the change events of AWS Config services. If you set EnableSSM=1, then you should set this option to '1'. The default is '0'."
    },
    "EnableConfigProvider": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Specifies whether AWS Config services should be set up to notify EC2 instance changes so that the instance can be auto-registered into Shadowsocks manager. If you set EnableSSN=1, then you should set this option to '1', but only set once in one AWS account. If you have already set up AWS Config in the account, then set this option to '0'. The default is '0'."
    },
    "ConfigProviderStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "Config Provider stack template URL, must be an AWS S3 URL."
    },
    "EnableLexBot": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Specifies whether Amazon Lex Bot should be set up so that a chat interface can be used to manage Shadowsocks manager and node stacks. If you set EnableSSM=1, then you could set this option to '1'. The default is '0'."
    },
    "LexBotStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "Lex Bot stack template URL, must be an AWS S3 URL."
    },
    "LexBotRegion": {
      "Type": "String",
      "Default": "",
      "Description": "Region name to deploy the Lex Bot stack, leave blank to deploy the Lex Bot in the default region."
    },
    "VpcStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC stack template URL, must be an AWS S3 URL."
    },
    "S3BucketForLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for LambdaSnsTopicSubscriber."
    },
    "S3KeyForLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for LambdaSnsTopicSubscriber."
    },
    "S3BucketForSsnLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for SsnLambdaSnsTopicSubscriber."
    },
    "S3KeyForSsnLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for SsnLambdaSnsTopicSubscriber."
    },
    "S3BucketForLambdaLexBot": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for LambdaLexBot."
    },
    "S3KeyForLambdaLexBot": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for LambdaLexBot."
    },
    "S3BucketForLambdaSsmApi": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for LambdaSsmApi."
    },
    "S3KeyForLambdaSsmApi": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for LambdaSsmApi."
    },
    "S3BucketForLambdaLayerRequests": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for LambdaLayerRequests."
    },
    "S3KeyForLambdaLayerRequests": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for LambdaLayerRequests."
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-northeast-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-03ede6cc926992148",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Asia Pacific (Tokyo)"
      },
      "ap-northeast-2": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-01dc121da1bd8cc87",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Asia Pacific (Seoul)"
      },
      "ap-northeast-3": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-09e1f9a41bc2f8541",
        "created": "2024-02-23T06:31:45.000Z",
        "location": "Asia Pacific (Osaka)"
      },
      "ap-south-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0ed547d7a23441118",
        "created": "2024-02-23T06:31:47.000Z",
        "location": "Asia Pacific (Mumbai)"
      },
      "ap-southeast-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-03869643c4ee0fd51",
        "created": "2024-02-23T06:31:47.000Z",
        "location": "Asia Pacific (Singapore)"
      },
      "ap-southeast-2": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-04583d641c7c2871f",
        "created": "2024-02-23T06:32:22.000Z",
        "location": "Asia Pacific (Sydney)"
      },
      "ca-central-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-06d0a340faaedb8d3",
        "created": "2024-02-23T06:31:44.000Z",
        "location": "Canada (Central)"
      },
      "eu-central-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0ac502ad8555a7341",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Europe (Frankfurt)"
      },
      "eu-north-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0c25aa580e098d764",
        "created": "2024-02-23T06:31:47.000Z",
        "location": "Europe (Stockholm)"
      },
      "eu-west-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0e0db53b7d6e32e58",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Europe (Ireland)"
      },
      "eu-west-2": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-080ec4e3c19f17d45",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Europe (London)"
      },
      "eu-west-3": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0f634594a95cadb9a",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "Europe (Paris)"
      },
      "sa-east-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0df5f057ad37dc9f6",
        "created": "2024-02-23T06:31:47.000Z",
        "location": "South America (Sao Paulo)"
      },
      "us-east-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-014d544cfef21b42d",
        "created": "2024-02-23T06:31:46.000Z",
        "location": "US East (N. Virginia)"
      },
      "us-east-2": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0da9b6167383dde73",
        "created": "2024-02-23T06:31:45.000Z",
        "location": "US East (Ohio)"
      },
      "us-west-1": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-082280ab3970ebe51",
        "created": "2024-02-23T06:31:44.000Z",
        "location": "US West (N. California)"
      },
      "us-west-2": {
        "name": "amzn2-ami-hvm-2.0.20240223.0-x86_64-gp2",
        "AMI": "ami-0dfd45428f2d4af0c",
        "created": "2024-02-23T06:31:45.000Z",
        "location": "US West (Oregon)"
      }
    }
  },
  "Outputs": {
    "AccountId": {
      "Value": {"Ref": "AWS::AccountId"}
    },
    "VpcId": {
      "Value": {"Fn::GetAtt": ["VpcStack", "Outputs.Vpc"]}
    },
    "SnsTopicArnForConfig": {
      "Condition": "EnableConfigConsumer",
      "Value": {"Ref": "SnsTopicForConfig"}
    },
    "SnsTopicArnForSsn": {
      "Condition": "EnableSSN",
      "Value": {"Ref": "SnsTopicForSsn"}
    },
    "LambdaLexBotArn": {
      "Condition": "EnableLexBot",
      "Value": {"Fn::GetAtt": ["LambdaLexBot", "Arn"]}
    },
    "IamPeerRoleArn": {
      "Condition": "EnableVpcPeerAcceptor",
      "Value": {"Fn::GetAtt": ["VpcPeerAcceptorStack", "Outputs.IamPeerRoleArn"]}
    },
    "VpcPeerAcceptorRegion": {
      "Condition": "EnableVpcPeerAcceptor",
      "Value": {"Ref": "AWS::Region"}
    },
    "VpcPeerAcceptorSqsQueueUrl": {
      "Condition": "EnableVpcPeerAcceptor",
      "Value": {"Fn::GetAtt": ["VpcPeerAcceptorStack", "Outputs.SqsPeerRouteQueueUrl"]}
    },
    "SecurityGroupId": {
      "Value": {"Ref": "VPNServerSG"}
    },
    "InstanceId": {
      "Value": {"Ref": "VPNServerInstance"}
    },
    "PublicIp": {
      "Value": {"Fn::GetAtt": ["VPNServerInstance", "PublicIp"]}
    },
    "PrivateIp": {
      "Value": {"Fn::GetAtt": ["VPNServerInstance", "PrivateIp"]}
    }
  }
}
