{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create VPN services, contains 1 EC2 instance, 1 EIP and 1 security group. Also contains a nested template to create VPC reources.",
  "Resources": {
    "VpcStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {"Ref": "VpcStackTemplateURL"},
        "Parameters": {
          "NS": {
            "Ref": "NS"
          },
          "VpcCidrBlock": {
            "Ref": "VpcCidrBlock"
          },
          "SubnetCidrBlocks": {
            "Fn::Join": [
              ",",
              {
                "Ref": "SubnetCidrBlocks"
              }
            ]
          }
        },
        "TimeoutInMinutes": "2"
      }
    },
    "VpcPeerAccepterStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableVpcPeerAccepter",
      "Properties": {
        "TemplateURL": {"Ref": "VpcPeerAccepterStackTemplateURL"},
        "Parameters": {
          "NS": {
            "Ref": "NS"
          },
          "NSLowerCase": {
            "Ref": "NSLowerCase"
          },
          "RouteTableId": {
            "Fn::GetAtt": [
              "VpcStack",
              "Outputs.PublicRouteTable"
            ]
          }
        },
        "TimeoutInMinutes": "2"
      }
    },
    "VpcPeerRequesterStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "EnableVpcPeerRequester",
      "Properties": {
        "TemplateURL": {"Ref": "VpcPeerRequesterStackTemplateURL"},
        "Parameters": {
          "NS": {
            "Ref": "NS"
          },
          "NSLowerCase": {
            "Ref": "NSLowerCase"
          },
          "VpcId": {
            "Fn::GetAtt": [
              "VpcStack",
              "Outputs.Vpc"
            ]
          },
          "CidrBlock": {
            "Ref": "VpcCidrBlock"
          },
          "RouteTableId": {
            "Fn::GetAtt": [
              "VpcStack",
              "Outputs.PublicRouteTable"
            ]
          },
          "PeeringVpcId": {
            "Ref": "VpcPeerAccepterVpcId"
          },
          "PeeringRegion": {
            "Ref": "VpcPeerAccepterRegion"
          },
          "PeeringAccountId": {
            "Ref": "VpcPeerAccepterAccountId"
          },
          "PeeringRoleArn": {
            "Ref": "VpcPeerAccepterRoleArn"
          },
          "PeeringCidrBlock": {
            "Ref": "VpcPeerAccepterCidrBlock"
          },
          "PeeringSqsQueueUrl": {
            "Ref": "VpcPeerAccepterSqsQueueUrl"
          }
        },
        "TimeoutInMinutes": "3"
      }
    },
    "VPNServerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "VPN server security group",
        "VpcId": {
          "Fn::GetAtt": [
            "VpcStack",
            "Outputs.Vpc"
          ]
        },
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "NS"
                  },
                  "VPNServerSG"
                ]
              ]
            }
          }
        ]
      }
    },
    "L2TPIKEIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableL2TP",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": 500,
        "ToPort": 500,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "L2TPNATIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableL2TP",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": 4500,
        "ToPort": 4500,
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "SSTCPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": {"Ref": "SSPortBegin"},
        "ToPort": {"Ref": "SSPortEnd"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "SSUDPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": {"Ref": "SSPortBegin"},
        "ToPort": {"Ref": "SSPortEnd"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "SSManagerIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSN",
      "Properties": {
        "IpProtocol": "udp",
        "FromPort": {"Ref": "SSManagerPort"},
        "ToPort": {"Ref": "SSManagerPort"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "SSMWebIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Condition": "EnableSSM",
      "Properties": {
        "IpProtocol": "tcp",
        "FromPort": {"Ref": "SSMPort"},
        "ToPort": {"Ref": "SSMPort"},
        "CidrIp": "0.0.0.0/0",
        "GroupId": {
          "Fn::GetAtt": [
            "VPNServerSG",
            "GroupId"
          ]
        }
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "InstanceId": {
          "Ref": "VPNServerInstance"
        }
      }
    },
    "VPNServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Monitoring": {
          "Ref": "Monitoring"
        },
        "SubnetId": {
          "Fn::GetAtt": [
            "VpcStack",
            "Outputs.PublicSubnet01"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "VPNServerSG"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": "8"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "NS"
            }
          }
          {"Fn::If": [
            "EnableSSN",
            {
              "Key": "Domain",
              "Value": {"Fn::Join": ["", [
                "{",
                "\"name\":\"", {"Ref": "SSDomain"},
                "\",\"nameserver\":\"", {"Ref": "SSDomainNameServer"},
                "\",\"user\":\"", {"Ref": "SSDomainUsername"},
                "\",\"credential\":\"", {"Ref": "SSDomainCredential"},
                "\"}"
              ]]}
            },
            {"Ref": "AWS::NoValue"}
          ]},
          {"Fn::If": [
            "EnableSSN",
            {
              "Key": "SSManager",
              "Value": {"Fn::Join": ["", [
                "{",
                "\"interface\":\"", {"Ref": "SSManagerInterface"},
                "\",\"port\":\"", {"Ref": "SSManagerPort"},
                "\",\"encrypt\":\"", {"Ref": "SSEncrypt"},
                "\",\"timeout\":\"", {"Ref": "SSTimeout"},
                "\",\"fastopen\":\"", {"Ref": "SSFastopen"},
                "\"}"
              ]]}
            },
            {"Ref": "AWS::NoValue"}
          ]}
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "#/opt/aws/bin/cfn-init ",
                "#         --stack ", {"Ref": "AWS::StackName"},
                "#         --resource VPNServerInstance ",
                "#         --configsets InstallAndRun ",
                "#         --region ", {"Ref": "AWS::Region"}, "\n",

                "yum update -y\n",

                "yum install -y git\n",
                "export PATH=/usr/local/bin:$PATH\n",

                "private_ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
                "public_ip=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",

                {"Fn::If": ["EnableSSN", {"Fn::Join": ["", [
                  "git clone --depth 1 https://github.com/alexzhangs/aws-ec2-shadowsocks-libev\n",

                  "bash aws-ec2-shadowsocks-libev/install.sh",
                  " -m '", {"Ref": "SSEncrypt"}, "'",
                  " -t '", {"Ref": "SSTimeout"}, "'",
                  " -f '", {"Ref": "SSFastopen"}, "'",
                  " -s \"", {"Fn::If": ["SSMIFLocalhost", "127.0.0.1",
                                       {"Fn::If": ["SSMIFPrivate", "$private_ip",
                                                   {"Fn::If": ["SSMIFPublic", "$public_ip", ""]}
                                                  ]}
                                       ]}, "\"",
                  " -p '", {"Ref": "SSManagerPort"}, "'\n"
                ]]}, ""]},

                {"Fn::If": ["EnableSSM", {"Fn::Join": ["", [
                  "yum install -y rabbitmq-server --enablerepo=epel\n",
                  "chkconfig rabbitmq-server on\n",
                  "service rabbitmq-server start\n",

                  "yum install -y memcached\n",
                  "chkconfig memcached on\n",
                  "service memcached start\n",

                  "yum install -y nginx\n",
                  "chkconfig nginx on\n",
                  "nginx -t && service nginx start\n",

                  "git clone --depth 1 https://github.com/alexzhangs/aws-ec2-supervisor\n",
                  "bash aws-ec2-supervisor/aws-ec2-supervisor-install.sh -i -v 4.0.3\n",
                  "chkconfig supervisord on\n",
                  "service supervisord start\n",

                  "yum install -y gcc\n",
                  "pip install uwsgi==2.0.18\n",

                  "git clone --depth 1 https://github.com/alexzhangs/shadowsocks-manager\n",

                  "bash shadowsocks-manager/install.sh",
                  " -n '", {"Fn::If": ["SSMDomainIsNotNull", {"Ref": "SSMDomain"},
                                        {"Fn::If": ["SSDomainIsNotNull", {"Ref": "SSDomain"},
                                                    ""]}
                                       ]}, "'",
                  " -u '", {"Ref": "SSMAdminUsername"}, "'",
                  " -p '", {"Ref": "SSMAdminPassword"}, "'",
                  " -e '", {"Ref": "SSMAdminEmail"}, "'",
                  " -t '", {"Ref": "SSMTimeZone"}, "'",
                  " -r '", {"Ref": "SSPortBegin"}, "'",
                  " -R '", {"Ref": "SSPortEnd"}, "'\n",

                  "supervisorctl reload\n",
                  "service nginx reload\n"
                ]]}, ""]},

                {"Fn::If": ["EnableL2TP", {"Fn::Join": ["", [
                  "git clone --depth 1 https://github.com/alexzhangs/aws-ec2-xl2tpd\n",
                  "git clone --depth 1 https://github.com/alexzhangs/chap-manager\n",

                  "bash aws-ec2-xl2tpd/install.sh",
                  " -k '", {"Ref": "L2TPSharedKey"}, "'",
                  " -p '", {"Ref": "L2TPPrimaryDNS"}, "'",
                  " -s '", {"Ref": "L2TPSecondaryDNS"}, "'\n",

                  "bash chap-manager/install.sh\n",

                  "chap-manager.sh -a add",
                  " -u '", {"Ref": "L2TPUsername"}, "'",
                  " -p '", {"Ref": "L2TPPassword"}, "'\n"
                ]]}, ""]},

                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $?",
                " --stack ", {"Ref": "AWS::StackName"},
                " --resource VPNServerInstance",
                " --region ", {"Ref": "AWS::Region"}, "\n",

                {"Fn::If": ["EnableSSM", {"Fn::Join": ["", [
                  "# restart to let Django aware EIP.\n",
                  "reboot\n"
                ]]}, ""]}
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT8M"
        }
      },
    "LambdaSnsTopicSubscriberExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableSSM",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/"
      }
    },
    "LambdaSnsTopicSubscriber": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableSSM",
      "Properties": {
        "Description": "Receive AWS Config events through SNS, and update Domain, Node and SSManager in shadowsocks-manager.",
        "Code": {
          "S3Bucket": {"Ref": "S3BucketForLambdaSnsTopicSubscriber"},
          "S3Key": {"Ref": "S3KeyForLambdaSnsTopicSubscriber"}
        },
        "Environment": {
          "Variables": {
            "SSM_DOMAIN": {"Ref": "SSMDomain"},
            "SSM_PORT": {"Ref": "SSMPort"},
            "SSM_ADMIN_USERNAME": {"Ref": "SSMAdminUsername"},
            "SSM_ADMIN_PASSWORD": {"Ref": "SSMAdminPassword"}
          }
        },
        "Handler": "LambdaSnsTopicSubscriber.lambda_handler",
        "Runtime": "python2.7",
        "Timeout": "15",
        "Role": {"Fn::GetAtt": ["LambdaSnsTopicSubscriberExecutionRole", "Arn"]}
      }
    },
    "LambdaSnsTopicSubscriberInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "EnableSSM",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["LambdaSnsTopicSubscriber", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "SnsTopicForConfig"}
      }
    },
    "SnsTopicForConfig": {
      "Type": "AWS::SNS::Topic",
      "Condition": "EnableSSM",
      "Properties": {
        "TopicName": {"Fn::Sub": "${AWS::StackName}-config-topic"},
        "Subscription": [
          {
            "Endpoint": {"Fn::GetAtt": ["LambdaSnsTopicSubscriber", "Arn"]},
            "Protocol": "lambda"
          }
        ]
      }
    },
    "SnsTopicPolicyForConfig": {
      "Type" : "AWS::SNS::TopicPolicy",
      "Condition": "EnableSSM",
      "Properties" : {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"AWS": "*"},
              "Action": "sns:Publish",
              "Resource": {"Ref": "SnsTopicForConfig"}
            }
          ]
        },
        "Topics": [{"Ref": "SnsTopicForConfig"}]
      }
    },
    "S3BucketForConfig": {
      "Type": "AWS::S3::Bucket",
      "Condition": "EnableSSN",
      "Properties": {
        "BucketName": {"Fn::Sub": "${AWS::StackName}-config-bucket"}
      },
      "DeletionPolicy": "Delete"
    },
    "S3BucketPolicyForConfig": {
      "Type" : "AWS::S3::BucketPolicy",
      "Condition": "EnableSSN",
      "Properties": {
        "Bucket": {"Ref": "S3BucketForConfig"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement":[
            {
              "Sid": "AWSConfigBucketPermissionsCheck",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:GetBucketAcl",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"}
            },
            {
              "Sid": "AWSConfigBucketExistenceCheck",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:ListBucket",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"}
            },
            {
              "Sid": "AWSConfigBucketDelivery",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:PutObject",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}/*"},
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "LambdaCleanBucketOnDeleteExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "EnableSSN",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"},
                    {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaCleanBucketOnDelete": {
      "Type": "AWS::Lambda::Function",
      "Condition": "EnableSSN",
      "Properties": {
        "Description": "Clean S3 Bucket on stack deletion.",
        "Code": { "ZipFile": { "Fn::Join": [ "\n", [
          "#!/usr/bin/env python",
          "",
          "from __future__ import print_function",
          "",
          "import boto3",
          "import cfnresponse",
          "",
          "print('Loading function')",
          "",
          "def lambda_handler(event, context):",
          "    try:",
          "        bucket = event['ResourceProperties']['BucketName']",
          "        requesttype = event['RequestType']",
          "",
          "        print('request type: {}, bucket: {}'.format(requesttype, bucket))",
          "        if requesttype == 'Delete':",
          "            s3 = boto3.resource('s3')",
          "            bucket = s3.Bucket(bucket)",
          "            for obj in bucket.objects.filter():",
          "                s3.Object(bucket.name, obj.key).delete()",
          "",
          "        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
          "    except Exception as e:",
          "        print(e)",
          "        cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})"
        ] ] } },
        "Handler": "index.lambda_handler",
        "Runtime": "python2.7",
        "Timeout": "15",
        "Role": {"Fn::GetAtt": ["LambdaCleanBucketOnDeleteExecutionRole", "Arn"]}
      }
    },
    "CleanBucketOnDelete": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Condition": "EnableSSN",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["LambdaCleanBucketOnDelete", "Arn"]},
        "BucketName": {"Ref": "S3BucketForConfig"}
      }
    },
    "AwsServiceRoleForConfig": {
      "Type": "AWS::IAM::ServiceLinkedRole",
      "Condition": "EnableSSN",
      "Properties": {
        "AWSServiceName": "config.amazonaws.com"
      }
    },
    "ConfigRecorder": {
      "Type": "AWS::Config::ConfigurationRecorder",
      "Condition": "EnableSSN",
      "Properties": {
        "Name": "default",
        "RecordingGroup": {
          "ResourceTypes": ["AWS::EC2::Instance"]
        },
        "RoleARN": {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/config.amazonaws.com/${AwsServiceRoleForConfig}"}
      }
    },
    "ConfigDeliveryChannel": {
      "Type": "AWS::Config::DeliveryChannel",
      "Condition": "EnableSSN",
      "Properties": {
        "S3BucketName": {"Ref": "S3BucketForConfig"},
        "SnsTopicARN": {"Ref": "SnsTopicArn"}
      }
    }
  },
  "Conditions": {
    "EnableVpcPeerAccepter": {
      "Fn::Equals": [{"Ref": "EnableVpcPeerAccepter"}, "1"]
    },
    "EnableVpcPeerRequester": {
      "Fn::Equals": [{"Ref": "EnableVpcPeerRequester"}, "1"]
    },
    "EnableSSN": {
      "Fn::Equals": [{"Ref": "EnableSSN"}, "1"]
    },
    "EnableSSM": {
      "Fn::Equals": [{"Ref": "EnableSSM"}, "1"]
    },
    "EnableL2TP": {
      "Fn::Equals": [{"Ref": "EnableL2TP"}, "1"]
    },
    "SSMDomainIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSMDomain"}]}]
    },
    "SSDomainIsNotNull": {
      "Fn::Not": [{"Fn::Equals":["", {"Ref": "SSDomain"}]}]
    },
    "SSMIFLocalhost": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "1"]
    },
    "SSMIFPrivate": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "2"]
    },
    "SSMIFPublic": {
      "Fn::Equals": [{"Ref": "SSManagerInterface"}, "3"]
    }
  },
  "Parameters": {
    "NS": {
      "Type": "String",
      "Default": "Foo",
      "Description": "Enter a Name Space for Stack. Default is 'Foo'."
    },
    "NSLowerCase": {
      "Type": "String",
      "Default": "foo",
      "Description": "Lower case of value of NS. Default is 'foo'."
    },
    "VpcCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "Enter CIDR Block for VPC. Default is '10.30.0.0/16' (65536 IPs).",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "EnableVpcPeerAccepter": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to create VPC peer accepter resource. 0: no, 1: yes. Default is '0'."
    },
    "VpcPeerAccepterStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC peer accepter stack template URL, must be an AWS S3 URL."
    },
    "EnableVpcPeerRequester": {
      "Type": "String",
      "Default": "0",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to create VPC peer requester resource. 0: no, 1: yes. Default is '0'."
    },
    "VpcPeerRequesterStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC peer requester stack template URL, must be an AWS S3 URL."
    },
    "VpcPeerAccepterVpcId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the VPC peer accepter."
    },
    "VpcPeerAccepterRegion": {
      "Type": "String",
      "Default": "",
      "Description": "Region code of the VPC peer accepter."
    },
    "VpcPeerAccepterAccountId": {
      "Type": "String",
      "Default": "",
      "Description": "AWS Account ID of the owner of the VPC peer accepter."
    },
    "VpcPeerAccepterRoleArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of the VPC peer role of accepter."
    },
    "VpcPeerAccepterCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the VPC peer accepter.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VpcPeerAccepterSqsQueueUrl": {
      "Type": "String",
      "Default": "",
      "Description": "SQS queue URL of the VPC peer accepter."
    },
    "SubnetCidrBlocks": {
      "Type": "CommaDelimitedList",
      "Default": "10.0.0.0/24, 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24",
      "Description": "Comma-delimited list of CIDR blocks for subnets. Default is '10.30.0.0/24, 10.30.1.0/24, 10.30.2.0/24, 10.30.3.0/24' (256 IPs each).",
      "ConstraintDescription": "The single CIDR block must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "Description": "Enter a Instance Type. Default is 't2.micro'."
    },
    "Monitoring": {
      "Type": "String",
      "Default": "false",
      "Description": "Enter mornitor status. Default is 'false'."
    },
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "myhosts",
      "Description": "Enter Key Pair name. Default is 'myhosts'"
    },
    "EnableSSN": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install Shadowsocks server. 0: no, 1: yes. Default is '1'."
    },
    "SnsTopicArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of SNS topic."
    },
    "EnableSSM": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install Shadowsocks manager. 0: no, 1: yes. Default is '1'."
    },
    "EnableL2TP": {
      "Type": "String",
      "Default": "1",
      "AllowedValues": ["0", "1"],
      "Description": "Whether to install L2TP server. 0: no, 1: yes. Default is '1'."
    },
    "SSPortBegin": {
      "Type": "String",
      "Default": "8381",
      "AllowedPattern": "\\d{1,5}",
      "Description": "Begin port allowed to use for Shadowsocks server. Default is '8381'."
    },
    "SSPortEnd": {
      "Type": "String",
      "Default": "8480",
      "AllowedPattern": "\\d{1,5}",
      "Description": "End port allowed to use for Shadowsocks server. Default is '8480'."
    },
    "SSDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain name resolved to Shadowsocks server. Example: vpn.yourdomain.com"
    },
    "SSDomainNameServer": {
      "Type": "String",
      "Default": "",
      "Description": "Nameserver for the domain. Supported values: ['name.com']."
    },
    "SSDomainUsername": {
      "Type": "String",
      "Default": "",
      "Description": "User identity for the Nameserver API service."
    },
    "SSDomainCredential": {
      "Type": "String",
      "Default": "",
      "Description": "User credential/token for the Nameserver API service."
    },
    "SSManagerInterface": {
      "Type": "String",
      "Default": "1",
      "Description": "Network interface bound to Shadowsocks Manager API on the node. 1: Localhost, 2: Private, 3: Public. Default is 1"
    },
    "SSManagerPort": {
      "Type": "String",
      "Default": "6001",
      "Description": "Port number bound to Shadowsocks Manager API. Default is 6001"
    },
    "SSEncrypt": {
      "Type": "String",
      "Default": "aes-256-gcm",
      "Description": "Encrypt method for Shadowsocks server. Default is 'aes-256-gcm'."
    },
    "SSTimeout": {
      "Type": "String",
      "Default": "60",
      "AllowedPattern": "\\d{1,3}",
      "Description": "Socket timeout in seconds for Shadowsocks server. Default is 60."
    },
    "SSFastopen": {
      "Type": "String",
      "Default": "false",
      "Description": "Enable TCP fast open for Shadowsocks server. Default is 'false'."
    },
    "SSMDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain Name resolved to Shadowsocks manager. Set this if don't want to use the same with Shadowsocks server. Example: vpn-admin.yourdomain.com."
    },
    "SSMPort": {
      "Type": "String",
      "Default": "8000",
      "Description": "Port number bound to Shadowsocks manager. Default is 8000"
    },
    "SSMAdminUsername": {
      "Type": "String",
      "Default": "admin",
      "Description": "Username for Shadowsocks manager administrator. Default is 'admin'."
    },
    "SSMAdminPassword": {
      "Type": "String",
      "Default": "passw0rd",
      "NoEcho": "true",
      "Description": "Password for Shadowsocks manager administrator. Default is 'passw0rd'."
    },
    "SSMAdminEmail": {
      "Type": "String",
      "Default": "",
      "Description": "Email address for Shadowsocks manager administrator. Will be shown as contact in account notification Email."
    },
    "SSMTimeZone": {
      "Type": "String",
      "Default": "UTC",
      "Description": "Prefered Time Zone. Default is 'UTC'."
    },
    "L2TPUsername": {
      "Type": "String",
      "Default": "vpnuser",
      "Description": "Enter username. Default is 'vpnuser'."
    },
    "L2TPPassword": {
      "Type": "String",
      "Default": "passw0rd",
      "NoEcho": "true",
      "Description": "Password to connecting to L2TP server. Default is 'passw0rd'."
    },
    "L2TPSharedKey": {
      "Type": "String",
      "Default": "SharedSecret",
      "NoEcho": "true",
      "Description": "Enter IPSec PSK. Default is 'SharedSecret'."
    },
    "L2TPPrimaryDNS": {
      "Type": "String",
      "Default": "8.8.8.8",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "Must be a valid IP v4 address like x.x.x.x.",
      "Description": "Enter primary DNS. Default is '8.8.8.8'."
    },
    "L2TPSecondaryDNS": {
      "Type": "String",
      "Default": "8.8.4.4",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "Must be a valid IP v4 address like x.x.x.x.",
      "Description": "Enter primary DNS. Default is '8.8.4.4'."
    },
    "VpcStackTemplateURL": {
      "Type": "String",
      "Default": "",
      "Description": "VPC stack template URL, must be an AWS S3 URL."
    },
    "S3BucketForLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 bucket name for LambdaSnsTopicSubscriber."
    },
    "S3KeyForLambdaSnsTopicSubscriber": {
      "Type": "String",
      "Default": "",
      "Description": "S3 key for LambdaSnsTopicSubscriber."
    }
  },
  "Mappings": {
    "RegionMap": {
      "ap-east-1": {
        "endpoint": "rds.ap-east-1.amazonaws.com",
        "location": "Asia Pacific (Hong Kong)"
      },
      "ap-northeast-1": {
        "AMI": "ami-29160d47",
        "endpoint": "rds.ap-northeast-1.amazonaws.com",
        "location": "Asia Pacific (Tokyo)"
      },
      "ap-northeast-2": {
        "AMI": "ami-983ce8f6",
        "endpoint": "rds.ap-northeast-2.amazonaws.com",
        "location": "Asia Pacific (Seoul)"
      },
      "ap-northeast-3": {
        "endpoint": "rds.ap-northeast-3.amazonaws.com",
        "location": "Asia Pacific (Osaka-Local)"
      },
      "ap-south-1": {
        "endpoint": "rds.ap-south-1.amazonaws.com",
        "location": "Asia Pacific (Mumbai)"
      },
      "ap-southeast-1": {
        "AMI": "ami-1ddc0b7e",
        "endpoint": "rds.ap-southeast-1.amazonaws.com",
        "location": "Asia Pacific (Singapore)"
      },
      "ap-southeast-2": {
        "endpoint": "rds.ap-southeast-2.amazonaws.com",
        "location": "Asia Pacific (Sydney)"
      },
      "ca-central-1": {
        "endpoint": "rds.ca-central-1.amazonaws.com",
        "location": "Canada (Central)"
      },
      "cn-north-1": {
        "endpoint": "rds.cn-north-1.amazonaws.com.cn",
        "location": "China (Beijing)"
      },
      "cn-northwest-1": {
        "endpoint": "rds.cn-northwest-1.amazonaws.com.cn",
        "location": "China (Ningxia)"
      },
      "eu-central-1": {
        "endpoint": "rds.eu-central-1.amazonaws.com",
        "location": "EU (Frankfurt)"
      },
      "eu-north-1": {
        "AMI": "ami-05a66c68",
        "endpoint": "rds.eu-north-1.amazonaws.com",
        "location": "EU (Stockholm)"
      },
      "eu-west-1": {
        "endpoint": "rds.eu-west-1.amazonaws.com",
        "location": "EU (Ireland)"
      },
      "eu-west-2": {
        "endpoint": "rds.eu-west-2.amazonaws.com",
        "location": "EU (London)"
      },
      "eu-west-3": {
        "endpoint": "rds.eu-west-3.amazonaws.com",
        "location": "EU (Paris)"
      },
      "sa-east-1": {
        "endpoint": "rds.sa-east-1.amazonaws.com",
        "location": "South America (São Paulo)"
      },
      "us-east-1": {
        "endpoint": "rds.us-east-1.amazonaws.com",
        "location": "US East (N. Virginia)"
      },
      "us-east-2": {
        "endpoint": "rds.us-east-2.amazonaws.com",
        "location": "US East (Ohio)"
      },
      "us-gov-east-1": {
        "endpoint": "rds.us-gov-east-1.amazonaws.com",
        "location": "AWS GovCloud (US-East)"
      },
      "us-gov-west-1": {
        "endpoint": "rds.us-gov-west-1.amazonaws.com",
        "location": "AWS GovCloud (US)"
      },
      "us-west-1": {
        "endpoint": "rds.us-west-1.amazonaws.com",
        "location": "US West (N. California)"
      },
      "us-west-2": {
        "AMI": "ami-08d489468314a58df",
        "endpoint": "rds.us-west-2.amazonaws.com",
        "location": "US West (Oregon)"
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Value": {
        "Fn::GetAtt": [
          "VpcStack",
          "Outputs.Vpc"
        ]
      }
    "SnsTopicArn": {
      "Condition": "EnableSSM",
      "Value": {"Ref": "SnsTopicForConfig"}
    },
    "IamPeerRoleArn": {
      "Condition": "EnableVpcPeerAccepter",
      "Value": {
        "Fn::GetAtt": [
          "VpcPeerAccepterStack",
          "Outputs.IamPeerRoleArn"
        ]
      }
    },
    "VpcPeerAccepterSqsQueueUrl": {
      "Condition": "EnableVpcPeerAccepter",
      "Value": {
        "Fn::GetAtt": [
          "VpcPeerAccepterStack",
          "Outputs.SqsPeerRouteQueueUrl"
        ]
      }
    },
    "SecurityGroupId": {
      "Value": {
        "Ref": "VPNServerSG"
      }
    },
    "InstanceId": {
      "Value": {
        "Ref": "VPNServerInstance"
      }
    },
    "PublicIp": {
      "Value": {
        "Fn::GetAtt": [
          "VPNServerInstance",
          "PublicIp"
        ]
      }
    },
    "PrivateIp": {
      "Value": {
        "Fn::GetAtt": [
          "VPNServerInstance",
          "PrivateIp"
        ]
      }
    }
  }
}
